<?php

/**
 * @file
 * Contains editorial alterations.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\hdbt_admin_tools\Form\SiteSettings;
use Drupal\select2_icon\Plugin\Field\FieldType\Select2Icon;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function hdbt_admin_editorial_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  if ($entity_type->id() === 'paragraph' && $bundle == 'hero') {
    // Add constraint to check if Hero image is mandatory.
    if (array_key_exists('field_hero_image', $fields)) {
      $fields['field_hero_image']->addConstraint('HeroImage', []);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_admin_editorial_form_node_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'node_landing_page_edit_form':
    case 'node_landing_page_form':
    case 'node_page_edit_form':
    case 'node_page_form':
      // Control Hero paragraph visibility via checkbox states.
      $form['field_hero']['#states'] = [
        'visible' => [
          ':input[name="field_has_hero[value]"]' => ['checked' => TRUE],
        ],
      ];
      break;
  }
  // Custom submit callback.
  $form['actions']['submit']['#submit'][] = 'hdbt_admin_editorial_node_form_submit_callback';

}

/**
 * Form submit callback for node forms.
 *
 * Redirect content editor to correct translation after saving the node.
 */
function hdbt_admin_editorial_node_form_submit_callback($form, FormStateInterface $form_state) {
  if ($langcode = $form_state->get('langcode')) {
    $language = [
      'language' => \Drupal::languageManager()->getLanguage($langcode),
    ];
    if ($nid = $form_state->get('nid')) {
      $node = [
        'node' => $nid,
      ];
      $form_state->setRedirect('entity.node.canonical', $node, $language);
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Hero designs:
 *   background-image     = "Background image"
 *   diagonal             = "Diagonal"
 *   with-image-bottom    = "Image on the bottom"
 *   with-image-left      = "Image on the left"
 *   with-image-right     = "Image on the right"
 *   without-image-center = "Without image, align center"
 *   without-image-left   = "Without image, align left"
 */
function hdbt_admin_editorial_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {

  // Perform alterations to Hero paragraph.
  if ($element['#paragraph_type'] == 'hero') {

    // Hero designs & hero design selection.
    $design_select = ':input[name="field_hero[' . $element['#delta'] . '][subform][field_hero_design][0]"]';

    // Show description only if design needs it.
    $element['subform']['field_hero_desc']['#states'] = [
      'invisible' => [
        [$design_select => ['value' => 'background-image']],
      ],
    ];

    // Show image only if design needs it.
    $element['subform']['field_hero_image']['#states'] = [
      'invisible' => [
        [$design_select => ['value' => 'without-image-center']],
        'or',
        [$design_select => ['value' => 'without-image-left']],
      ],
    ];

    // Show link and link design only if design needs them.
    $link_states = [
      'visible' => [
        [$design_select => ['value' => 'background-image']],
      ],
    ];
    $element['subform']['field_hero_link']['#states'] = $link_states;
    $element['subform']['field_hero_link_design']['#states'] = $link_states;

    $fields = [
      'field_hero_desc',
      'field_hero_image',
      'field_hero_link',
      'field_hero_link_design',
    ];

    // Set types if they're missing to prevent undefined index error in
    // /core/lib/Drupal/Core/Form/FormHelper.php:211
    foreach ($fields as $field) {
      if (!isset($element['subform'][$field]['#type'])) {
        $element['subform'][$field]['#type'] = '';
      }
    }
  }

  // Perform alterations to Columns paragraph.
  if ($element['#paragraph_type'] == 'columns') {
    // Attach columns toggle JS when necessary.
    $element['#attached']['library'][] = 'hdbt_admin/columns-toggle';
  }

  // Perform alterations to Banner paragraph.
  if ($element['#paragraph_type'] == 'banner') {
    // Banner design selection.
    $design_select = ':input[name="field_content[' . $element['#delta'] . '][subform][field_banner_design][0]"]';

    // Show icon only if design needs it.
    $element['subform']['field_icon']['#states'] = [
      'visible' => [
        [$design_select => ['value' => 'align-left']],
        'or',
        [$design_select => ['value' => 'align-left-secondary']],
      ],
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a title, design and target fields to EditorLinkDialog.
 */
function hdbt_admin_editorial_form_editor_link_dialog_alter(&$form, FormStateInterface $form_state) {

  if (isset($form_state->getUserInput()['editor_object'])) {
    $input = $form_state->getUserInput()['editor_object'];
    $form_state->set('link_element', $input);
    $form_state->setCached(TRUE);
  }
  else {
    // Retrieve the link element's attributes from form state.
    $input = $form_state->get('link_element') ?: [];
  }

  // Helper function to retrieve form field default values.
  $get_default_value = function ($attribute_name, $fallback = '') use ($input) {
    return !empty($input[$attribute_name]) ? $input[$attribute_name] : $fallback;
  };

  $form['#attached']['library'][] = 'hdbt_admin_editorial/modal_window_position';
  $form['#attached']['library'][] = 'hdbt_admin_editorial/link_plugin_enhancements';

  $form['attributes']['data-link-text'] = [
    '#type' => 'textfield',
    '#title' => t('Link text'),
    '#default_value' => $get_default_value('data-link-text'),
    '#maxlength' => 512,
  ];

  $form['attributes']['data-protocol'] = [
    '#type' => 'select',
    '#title' => t('Protocol'),
    '#default_value' => $get_default_value('data-protocol'),
    '#options' => [
      'false' => t('Select'),
      'https://' => t('https://'),
      'http://' => t('http://'),
      'tel://' => t('tel://'),
      'mailto://' => t('mailto://'),
    ],
    '#weight' => -100,
  ];

  $form['attributes']['data-design'] = [
    '#type' => 'select',
    '#title' => t('Design'),
    '#default_value' => $get_default_value('data-design'),
    '#options' => [
      'link' => t('Default'),
      'hds-button hds-button--primary' => t('Button primary'),
      'hds-button hds-button--secondary' => t('Button secondary'),
      'hds-button hds-button--supplementary' => t('Button supplementary'),
    ],
    '#weight' => 1,
  ];

  $form['attributes']['data-icon'] = [
    '#title' => t('Icon'),
    '#type' => 'select2_icon_element',
    '#default_value' => $get_default_value('data-icon', NULL),
    '#options' => Select2Icon::loadIcons(),
    '#weight' => 3,
  ];

  $form['attributes']['target'] = [
    '#title' => t('Open in new window/tab'),
    '#type' => 'checkbox',
    '#default_value' => $get_default_value('target', FALSE),
    '#return_value' => '_blank',
    '#weight' => 2,
  ];

  $form['advanced'] = [
    '#type' => 'details',
    '#title' => t('Advanced settings'),
    '#weight' => 3,
  ];

  $form['attributes']['title'] = [
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t(
      'Populates the title attribute of the link, usually shown as a small tooltip on hover.'
    ),
    '#default_value' => $get_default_value('title'),
    '#maxlength' => 512,
    '#group' => 'advanced',
  ];

  $form['attributes']['id'] = [
    '#type' => 'textfield',
    '#title' => t('ID'),
    '#description' => t(
      'Allows linking to this content using a URL fragment (#). Must be unique.'
    ),
    '#default_value' => $get_default_value('id'),
    '#maxlength' => 512,
    '#group' => 'advanced',
  ];

  // Add validation callback for empty attributes.
  array_unshift(
    $form['#validate'],
    '_hdbt_admin_editorial_attributes_validate'
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hdbt_admin_editorial_form_linkit_editor_dialog_form_alter(&$form, FormStateInterface $form_state) {
  hdbt_admin_editorial_form_editor_link_dialog_alter($form, $form_state);
}

/**
 * Validation for link attributes.
 */
function _hdbt_admin_editorial_attributes_validate(array &$form, FormStateInterface $form_state) {
  $skip_attributes = ['protocol'];
  $values = $form_state->getValue('attributes');
  $link_element = $form_state->get('link_element');
  foreach ($values as $key => $value) {
    if (empty($value) && !in_array($key, $skip_attributes)) {
      $form_state->setValue(['attributes', $key], '');
      if (empty($link_element)) {
        $form_state->unsetValue(['attributes', $key]);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Set paragraph information as data-attributes for the paragraph dropbutton.
 */
function hdbt_admin_editorial_preprocess_links__dropbutton__operations__paragraphs(&$variables) {
  $buttons = &$variables['links'];

  if ($buttons && is_array($buttons)) {

    // Construct image path for the paragraph type thumbnails.
    global $base_secure_url;
    $handler = \Drupal::service('module_handler');
    $image_path = $base_secure_url . '/' . $handler->getModule('hdbt_admin_editorial')->getPath() . '/assets/images/';
    $variables['attributes']['class'][] = 'paragraph-selection';

    // Attach image path and paragraph selection library.
    $variables['#attached']['drupalSettings']['paragraphSelect']['pathToImages'] = $image_path;
    $variables['#attached']['drupalSettings']['paragraphSelect']['fallbackImage'] = 'custom-style.svg';
    $variables['#attached']['library'][] = 'hdbt_admin_editorial/paragraph_selection';

    // Get paragraph types.
    $paragraph_storage = \Drupal::entityTypeManager()->getStorage('paragraphs_type');
    $paragraph_types = $paragraph_storage->loadMultiple();

    // Go through buttons and set the necessary data-attributes.
    foreach ($buttons as &$button) {
      /** @var \Drupal\paragraphs\Entity\ParagraphsType $bundle */
      $bundle = $paragraph_types[$button['text']['#bundle_machine_name']];
      $image = str_replace('_', '-', $bundle->get('id'));

      if ($bundle) {
        $button['attributes']->setAttribute('data-paragraph-title', $bundle->get('label'));
        $button['attributes']->setAttribute('data-paragraph-description', $bundle->get('description'));
        $button['attributes']->setAttribute('data-paragraph-image', 'paragraph--' . $image);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function hdbt_admin_editorial_form_alter(&$form) {

  // Handle only admin routes.
  if (!\Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }

  // Attach design selection library and path to images to current form.
  // If design selection field widget is in use in f.e. a paragraph and it is
  // loaded via ajax, there might be situation where the select2 library is
  // loaded before the design selection library.
  global $base_secure_url;
  $handler = \Drupal::service('module_handler');
  $image_path = $base_secure_url . '/' . $handler->getModule('hdbt_admin_editorial')->getPath() . '/assets/images/';
  $form['#attached']['library'][] = 'hdbt_admin_editorial/design_selection';
  $form['#attached']['drupalSettings']['designSelect']['pathToImages'] = $image_path;
}

/**
 * Implements hook_entity_base_field_info().
 */
function hdbt_admin_editorial_entity_base_field_info(EntityTypeInterface $entity_type) {

  // Entity types to be updated.
  $entity_types = [
    'node',
    'tpr_unit',
    'tpr_service'
  ];

  // Add color palette field to each entity type.
  if (in_array($entity_type->id(), $entity_types)) {
    $fields['color_palette'] = BaseFieldDefinition::create('list_string')
      ->setRequired(FALSE)
      ->setTranslatable(FALSE)
      ->setLabel(t('Color palette'))
      ->setSettings([
        'allowed_values_function' => 'Drupal\hdbt_admin_tools\Form\SiteSettings::getColorPalettes'
      ])
      ->setDisplayOptions('form', [
        'type' => 'color_palette_field_widget',
        'weight' => 0,
      ]);
    return $fields;
  }
}

/**
 * Implements hook_entity_presave().
 */
function hdbt_admin_editorial_entity_presave($entity) {
  if (!method_exists($entity, 'hasField') || !$entity->hasField('color_palette')) {
    return;
  }

  // Do not save the color palette override value if chosen color palette is
  // same as global color palette value. This will prevent possible false
  // overrides if global color palette is changed.
  if ($entity->color_palette->value == SiteSettings::getColorPaletteDefaultValue()) {
    $entity->set('color_palette', NULL);
  }
}
